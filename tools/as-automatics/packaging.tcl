# -----------------------------------------------------------------------------
# This file is part of the ASTERICS Framework.
# (C) 2019 Hochschule Augsburg, University of Applied Sciences
# -----------------------------------------------------------------------------
# packaging.tcl
#
# Company:
# Efficient Embedded Systems Group
# University of Applied Sciences, Augsburg, Germany
# http://ees.hs-augsburg.de
#
# Author:
# Philip Manke
#
# Description:
#   TCL script to be executed in Vivado's TCL mode.
#   Packages an IP Core generated by Automatics.
# --------------------- LICENSE -----------------------------------------------
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 3 of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
# or write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
# -----------------------------------------------------------------------------

# --------- FindFiles helper functions ----------

# findFiles
# basedir - the directory to start looking in
# pattern - A pattern, as defined by the glob command, that the files must match
proc findFiles { basedir pattern } {

    # Fix the directory name, this ensures the directory name is in the
    # native format for the platform and contains a final directory seperator
    set basedir [string trimright [file join [file normalize $basedir] { }]]
    set fileList {}

    # Look in the current directory for matching files, -type {f r}
    # means ony readable normal files are looked at, -nocomplain stops
    # an error being thrown if the returned list is empty
    foreach fileName [glob -nocomplain -type {f r} -path $basedir $pattern] {
        lappend fileList $fileName
    }

    # Now look for any sub direcories in the current directory
    foreach dirName [glob -nocomplain -type {d  r} -path $basedir *] {
        # Recusively call the routine on the sub directory and append any
        # new files to the results
        set subDirList [findFiles $dirName $pattern]
        if { [llength $subDirList] > 0 } {
            foreach subDirFile $subDirList {
                lappend fileList $subDirFile
            }
        }
    }
    return $fileList
 }


# Same thing as findFiles, except it skips the files in the toplevel directory
# basedir - the directory to start looking in
# pattern - A pattern, as defined by the glob command, that the files must match
proc findFilesSubdirs { basedir pattern } {
    # Fix the directory name, this ensures the directory name is in the
    # native format for the platform and contains a final directory seperator
    set basedir [string trimright [file join [file normalize $basedir] { }]]
    set fileList {}

    # Now look for any sub direcories in the current directory
    foreach dirName [glob -nocomplain -type {d  r} -path $basedir *] {
        # Recusively call the routine on the sub directory and append any
        # new files to the results
        set subDirList [findFiles $dirName $pattern]
        if { [llength $subDirList] > 0 } {
            foreach subDirFile $subDirList {
                lappend fileList $subDirFile
            }
        }
    }
    return $fileList
}

# findFilesRev
# Same thing as findFiles, but adds files in reverse order
# basedir - the directory to start looking in
# pattern - A pattern, as defined by the glob command, that the files must match
proc findFilesRev { basedir pattern } {

    # Fix the directory name, this ensures the directory name is in the
    # native format for the platform and contains a final directory seperator
    set basedir [string trimright [file join [file normalize $basedir] { }]]
    set fileList {}

    # Now look for any sub direcories in the current directory
    foreach dirName [glob -nocomplain -type {d  r} -path $basedir *] {
        # Recusively call the routine on the sub directory and append any
        # new files to the results
        set subDirList [findFiles $dirName $pattern]
        if { [llength $subDirList] > 0 } {
            foreach subDirFile $subDirList {
                lappend fileList $subDirFile
            }
        }
    }
    # Look in the current directory for matching files, -type {f r}
    # means ony readable normal files are looked at, -nocomplain stops
    # an error being thrown if the returned list is empty
    foreach fileName [glob -nocomplain -type {f r} -path $basedir $pattern] {
        lappend fileList $fileName
    }
    return $fileList
 }

# --------  Vivado IP Core Packaging script for ASTERICS Systems --------
# Used by Automatics - The ASTERICS automated system generator

#puts $argv  # Debug
source -notrace [lindex $argv 0]

#  General Settings
set vendor_name "ees.hs-augsburg.de"
set vendor_url "http://ees.hs-augsburg.de"
set vendor_display_name "ASTERICS"

#############
# IP Settings
#############

set hdl_files [findFilesRev $hdldir "*.vhd"]
# Debug output:
#puts $hdl_files

set ip_files []

set constraints_files []

###########################
# Create Managed IP Project
###########################

create_project -force $design $projdir -part $partname 
set_property target_language VHDL [current_project]
set_property source_mgmt_mode None [current_project]

if [info exists board_part] {
set_property "board_part" $boardpart [current_project]
}

##########################################
# Create filesets and add files to project
##########################################

#HDL
if {[string equal [get_filesets -quiet sources_1] ""]} {
    create_fileset -srcset sources_1
}
#set_property library {asterics} [get_files {lolnope.vhd}]
#set_property source_mgmt_mode All [current_project]

add_files -norecurse -fileset [get_filesets sources_1] $hdl_files


#set_property source_mgmt_mode None [current_project]

# Set all files to VHDL 2008
#set_property file_type {VHDL 2008} [get_files -of_objects [get_filesets sources_1]]

set_property library {asterics} [get_files -of_objects [get_filesets sources_1]]

set_property library {axi_master_burst_v2_0_7} -quiet [get_files -quiet axi_master_burst_v2_0_vh_rfs.vhd]
set_property library {lib_srl_fifo_v1_0_2} -quiet [get_files -quiet lib_srl_fifo_v1_0_rfs.vhd]
set_property library {lib_pkg_v1_0_2} -quiet [get_files -quiet lib_pkg_v1_0_rfs.vhd]


set_property top $design [get_filesets sources_1]

puts "Updating the compile order of all sources..."

update_compile_order -fileset sources_1

set to_disable []

#source -notrace ${projdir}package_ooc_config.tcl
source ${projdir}package_ooc_config.tcl

set_property source_mgmt_mode DisplayOnly [current_project]

#CONSTRAINTS
if {[string equal [get_filesets -quiet constraints_1] ""]} {
  create_fileset -constrset constraints_1
}
if {[llength $constraints_files] != 0} {
    add_files -norecurse -fileset [get_filesets constraints_1] $constraints_files
}

#ADDING IP
if {[llength $ip_files] != 0} {
    
    #Add to fileset
    add_files -norecurse -fileset [get_filesets sources_1] $ip_files
   
    #RERUN/UPGRADE IP
    upgrade_ip [get_ips]
}

##########################################
# Synthesize (Optional, checks for sanity)
##########################################

#set_property top $design [current_fileset]
#launch_runs synth_1 -jobs 4
#wait_on_run synth_1


#########
# Package
#########

puts "Updating compile order and packaging..."
ipx::package_project -import_files -force -root_dir $projdir -force_update_compile_order
#ipx::package_project -import_files -force -root_dir $projdir

# Set libraries for packaged IP Core
set file_list [ipx::get_files -of_objects [ipx::get_file_groups xilinx_anylanguagesynthesis]]
foreach { file } $file_list {
    set_property library_name asterics $file
}
set_property -quiet library_name {ieee} [ipx::get_files -quiet -of_objects [ipx::get_file_groups xilinx_anylanguagesynthesis] *fixed_pkg_2008.vhd]

set_property -quiet library_name {axi_master_burst_v2_0_7} [ipx::get_files -quiet -of_objects [ipx::get_file_groups xilinx_anylanguagesynthesis] *axi_master_burst_v2_0_vh_rfs.vhd]

set_property -quiet library_name {lib_srl_fifo_v1_0_2} [ipx::get_files -quiet -of_objects [ipx::get_file_groups xilinx_anylanguagesynthesis] *lib_srl_fifo_v1_0_rfs.vhd]

set_property -quiet library_name {lib_pkg_v1_0_2} [ipx::get_files -quiet -of_objects [ipx::get_file_groups xilinx_anylanguagesynthesis] *lib_pkg_v1_0_rfs.vhd]

source -notrace ${projdir}package_interface_config.tcl

set_property display_name        $display_name [ipx::current_core]
set_property description         $description [ipx::current_core]
set_property vendor              $vendor_name    [ipx::current_core]
set_property library             {user}                  [ipx::current_core]
set_property taxonomy            {{/Image_Processing}} [ipx::current_core]
set_property vendor_display_name $vendor_display_name              [ipx::current_core]
set_property company_url         $vendor_url    [ipx::current_core]
set_property supported_families  { \
                     {kintex7}    {Production} \
                     {kintex7l}   {Production} \
                     {artix7}     {Production} \
                     {artix7l}    {Production} \
                     {aartix7}    {Production} \
                     {zynq}       {Production} \
                     {azynq}      {Production} \
                     {zynquplus}  {Production} \
                     }   [ipx::current_core]


############################
# Save and Write ZIP archive
############################

ipx::create_xgui_files [ipx::current_core]
ipx::update_checksums [ipx::current_core]
puts "Saving IP-Core..."
ipx::save_core [ipx::current_core]
ipx::check_integrity -quiet [ipx::current_core]
set result [ipx::archive_core [concat $projdir/$design.zip] [ipx::current_core]]

if { $result > 0 } {
    puts "IP packaging completed!"
} else {
    puts "Encountered an error during IP packaging!"
}

close_project
exit
